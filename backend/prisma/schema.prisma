generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  isActive      Boolean        @default(true)
  roleId        String
  officeId      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  lastLoginAt   DateTime?
  refreshTokens RefreshToken[]
  office        Office         @relation(fields: [officeId], references: [id])
  role          Role           @relation(fields: [roleId], references: [id])

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  users       User[]
  menus       Menu[]       @relation("MenuToRole")
  permissions Permission[] @relation("PermissionToRole")

  @@map("roles")
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]   @relation("PermissionToRole")

  @@map("permissions")
}

model Menu {
  id        String   @id @default(uuid())
  name      String
  path      String?
  icon      String?
  parentId  String?
  order     Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parent    Menu?    @relation("MenuHierarchy", fields: [parentId], references: [id])
  children  Menu[]   @relation("MenuHierarchy")
  roles     Role[]   @relation("MenuToRole")

  @@map("menus")
}

model Office {
  id          String   @id @default(uuid())
  name        String
  code        String   @unique
  description String?
  address     String?
  phone       String?
  email       String?
  parentId    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  parent      Office?  @relation("OfficeHierarchy", fields: [parentId], references: [id])
  children    Office[] @relation("OfficeHierarchy")
  users       User[]

  @@map("offices")
}
